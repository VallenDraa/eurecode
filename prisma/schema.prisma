// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
datasource db {
  provider     = "mysql"
  relationMode = "prisma"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ROADMAP RELATED MODELS
model Roadmap {
  id        String   @id @default(cuid())
  creatorId String
  topic     String   @db.VarChar(250)
  upvotes   BigInt   @default(0)
  downvotes BigInt   @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([creatorId])
}

model RoadmapNode {
  id        String   @id @default(cuid())
  content   String   @db.LongText
  roadmapId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([roadmapId])
}

model RoadmapComment {
  id              String   @id @default(cuid())
  content         String   @db.LongText
  commenterId     String
  roadmapId       String
  upvotes         BigInt   @default(0)
  downvotes       BigInt   @default(0)
  parentCommentId String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([commenterId, roadmapId, parentCommentId])
}

// DISCUSSION RELATED MODELS
model Discussion {
  id               String   @id @default(cuid())
  originalPosterId String
  topic            String   @db.VarChar(250)
  upvotes          BigInt   @default(0)
  downvotes        BigInt   @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([originalPosterId])
}

model DiscussionComment {
  id              String   @id @default(cuid())
  content         String   @db.LongText
  commenterId     String
  discussionId    String
  upvotes         BigInt   @default(0)
  downvotes       BigInt   @default(0)
  parentCommentId String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([commenterId, discussionId, parentCommentId])
}

// USER SAVED ITEMS MODEL
enum ItemType {
  Roadmap
  Discussion
}

model SavedItem {
  id        String   @id @default(cuid())
  itemType  ItemType
  itemId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])

  @@unique([itemId])
  @@index([userId])
}

// NECESSARY FOR NEXT AUTH
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  User              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  SavedItems    SavedItem[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
